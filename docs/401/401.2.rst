===========================
401.2 MFA Policy Governance
===========================

-------------------
Learning Objectives
-------------------

* Use Grouper policy to control Shibboleth MFA behavior
* Create `eduPersonEntitlement` value to represent desired MFA behavior
* Evolve digital policy to match changing natural language policy

--------------
Lab Components
--------------

* Shibboleth
* Grouper
* PSPNG
* OpenLDAP
* eduPerson schema - `eduPersonEntitlement`
* REFEDS MFA profile
* `Grouper Deployment Guide <https://spaces.at.internet2.edu/display/Grouper/Grouper+Deployment+Guide+Work+-TIER+Program>`_

--------
Overview
--------

Your institution is deploying multi-factor authentication (MFA). The first
target application is Web SSO. Any account enabled for MFA will experience
common MFA behaviors sufficient to assert the REFEDS MFA profile during 
WebSSO authentication. The project plan calls for an initial pilot phase,
followed by a number phases where different cohorts will be required or
may opt-in. During the initial pilot phase, select cohorts will be asked to
volunteer. Your mission, should you choose to accept, is to create and evolve
the digital policy necessary to achieve the project goals.

----------------
Exercise 401.2.1
----------------

*Create initial MFA application folder set and policy in Grouper*

#. Create `app:mfa:mfa_enabled|allow|deny`.
#. Create `app:mfa:ref:pilot`.  This reference group is an access control
   list (ACL) as opposed to ABAC policy.
#. Add `app:mfa:ref:pilot` to `app:mfa:mfa_enabled_allow`.


----------------
Exercise 401.2.2
----------------

*Establish an eduPersonEntitlement value to signal "MFA enabled"*

We will assign a unique `eduPersonEntitilement` (ePE) value to LDAP accounts
that are MFA enabled.  We choose the value 
**http://tier.internet2.edu/mfa/enabled**.

There are 2 steps to accomplish this:

#. Assign PSPNG `provision_to` attribute (attribute def `provision_to_def`) 
   to `app:mfa:mfa_enabled` with a value of `pspng_entitlements`.
#. Configure PSPNG to provision this attribute.

   .. literalinclude:: examples/401.2.2-pspng-config.properties
        :language: properties
        :lines: 92-100
        :caption: grouper-loader.properties
        :name: 401.2.2-pspng-groupofnames
        :linenos:

----------------
Exercise 401.2.3
----------------

*Configure Shibboleth IdP to honor MFA enabled ePE value and assert REFEDS
MFA profile*

.. literalinclude:: examples/401.2.3-general-authn.xml
   :language: xml
   :emphasize-lines: 14, 16
   :lines: 112-130
   :caption: mfa-authn-config.xml
   :linenos:

.. literalinclude:: examples/401.2.3-mfa-authn-config.xml
   :language: xml
   :emphasize-lines: 25
   :lines: 53-86
   :caption: mfa-authn-config.xml
   :linenos:

Now have a working MFA policy. Adding new volunteers to the pilot is as easy as
adding members to the pilot group. The next rollout phase calls for onboarding
select departments, but allow for exceptions.

----------------
Exercise 401.2.4
----------------

*Onboard select departments, but allow for exceptions*

#. Add `ref:dept:its` to `app:mfa:mfa_enabled_allow`.
#. Add `app:mfa:ref:mfa_bypass` to `app:mfa:mfa_enabled_deny`.  Add [NetID] to
   `mfa_bypass` to exclude from `mfa_enabled`.
#. Athletics departement

   * You don't have a reference group, but you were provided a list of subject IDs:

     .. literalinclude:: examples/401.2.4-athletics-dept.txt
        :language: text 
        :caption: Athletics Department
        :linenos:

   * Import the list as a temporary app-specific reference group.
   * Add this reference group to `mfa_enabled_allow`.

The MFA pilot is going well when the institution is hit with some direct deposit
fraud. Mandate comes from leadership to add some required cohorts. The new
policy is "any non-faculty who has access to sensitive data (i.e. Banner
INB) must have mfa enabled". The new policy should be active within two days.


----------------
Exercise 401.2.5
----------------

*Update policy to include all non-faculty employees who have access to sensitive data in Banner*

The Banner support team provides a list of NetIDs to satisfy the "non-faculty
who have access to sensitive data in Banner" part of the policy.

#. Create `app:mfa:ref:NonFacultyBannerINB` and import list of NetIDs.

    .. literalinclude:: examples/401.2.5-banner-netids.txt

#. Add `NonFacultyBannerINB` to `app:mfa:mfa_enabled_allow`.  Edit the start
   date for this group to be in the future.
#. Use :ref:`SQL <apdx-401.2.5-future-memberships-query>` to view memberships
   enabled in the future.

Thatâ€™s was easy! Except-- the list is not quite right. Some faculty were
included for some reason. Help desk calling!  Need to remove faculty members.


----------------
Exercise 401.2.6
----------------

*Update policy to include all Banner users except faculty*

#. Create `app:mfa:ref:BannerUsersMinusFaculty`.
#. Edit this reference group to make it composite of `NonFacultyBannerINB`
   minus `ref:faculty`.

The new policy is in place and the pilot continues to expand. The next phase
calls for any faculty, staff, or student who are not already required to be
able to opt-in or out of MFA at their discretion. 


----------------
Exercise 401.2.7
----------------

*Allow any faculty, staff, or student to opt-in/out if they are not already
required by other policy*

#. Create `app:mfa:ref:mfa_opt_in`, an opt-in group for individuals who want to
   join or leave the service.
#. Add `mfa_opt_in` to `mfa_enabled_allow`.
#. Create a new grouper security group, `app:mfa:etc:mfa_opt_in_access|allow|deny`.
#. Add faculty, staff, and student reference groups to
   `app:mfa:etc:mfa_opt_in_access_allow`.
#. Create `app:mfa:ref:mfa_required` and copy your required members from the
   `mfa_enabled_allow` policy to `mfa_required`.  
#. Add `mfa_required` to `mfa_enabled_allow` and remove the redundant members.
#. Add `app:mfa:ref:mfa_required` to `mfa_opt_in_access_deny`.
#. Configure `mfa_opt_in` privileges to grant `mfa_opt_in_access` *OptIn* and
   *OptOut* rights.

Now, subject **awhite318** (Amber White) can log in and see the
`mfa_opt_in` group.  This subject is able to join or leave at will.

"""""""""""""""""""""""""""""
Improving the User Experience
"""""""""""""""""""""""""""""

The Grouper UI is sufficient for simple user interaction, but not a great user
experience. Another approach is to build a small, web-based application to
manage membership directly or via database and grouper loader.

* Web application maintains a database of NetIDs that have opted in.
* Grouper loader job imports opt-in members into a reerence group.
* The web app needs to know what NetIDs are required to use MFA and are
  therefore ineligible to use the web app.  Grouper can provision a 2nd
  ePE, `http://tier.internet2.edu/mfa/required`.

Working great!  But, accounts that were put in early bypass for some reason
now can't opt-in.  It looks like they enabled it, but they get filtered out of
`mfa_enabled` because of the bypass membership.  Removing those accounts from
bypass puts them in `mfa_enabled`.

----------------
Exercise 401.2.8
----------------

*Refactor `...:ref:bypass` to accommodate users who opt-in to MFA*

#. Refactor `...:ref:bypass` to  `...:basis:mfa_bypass`.
#. Create new `...:ref:mfa_bypass_not_opt_in` composite 
   (`...:basis:mfa_bypass` - `...:ref:mfa_opt_in`).
#. Add `...:ref:mfa_bypass_not_opt_in` to `app:mfa:mfa_enabled_deny`.

Another way might be to use Grouper rules.

Pilot has been a success. Leadership wants all remaining faculty, staff,
and students to be enabled by policy.

----------------
Exercise 401.2.9
----------------

*Add all remaining faculty, staff, and students to policy*

#. Add appropriate reference groups to allow policy.
#. Clean up intermediate policy and application reference groups.

   * Add `faculty`, `staff`, and `student` reference groups to policy.
   * Remove app specific reference and basis groups.

We should now have a fairly clean app policy folder.  We were able to update
digital policy without affecting service.

Kick back and have a margarita!

